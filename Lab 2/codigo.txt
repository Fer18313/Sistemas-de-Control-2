/*---------------------------------------------------------
 *  SISTEMAS DE CONTROL 1 SECCION 20
 *  LABORATORIO 7
 *  JULIO LOPEZ    18211
 *
 *
 * ---------------------------------------------------------
 * */

#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"

#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"

#include "driverlib/adc.h"
#include "driverlib/timer.h"
#include "driverlib/interrupt.h"
#include "driverlib/ssi.h"
#include "driverlib/pin_map.h"

#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line){}
#endif


#define FREQ_MUESTREO 1000
#define NUM_SPI_DATA    1  // N mero de palabras que se env an cada vez
#define VALOR_MAX    4095  // Valor m ximo del contador
#define SPI_FREC  4000000  // Frecuencia para el reloj del SPI
#define SPI_ANCHO      16  // N mero de bits que se env an cada vez, entre 4 y 16



// Estos valores fueron ajustados en vivo, los valores finales estan en el
// reporte
float tus_1k[5] = {0.1431, 0.8569, 38.38, -71.62, 33.41};
float ZPM_1k[5] = {1,-0.000033203,20.69,38.62,18.02};

float BE_1k[5]  = {1.037,-0.03711,21.26,-39.76,18.59};


//float tus_10k[5]= {};
float ZPM_10k[5]={1,-5.09e-11 ,17.57 ,-32.6,15.12};
float BE_10k[5] = {16.62,-30.91,14.37,1.042,-0.04225};

//volatile float v0, v1a;
/*
volatile int32_t error=0, errorAnterior,errorAcu = 0;
volatile int32_t y;
volatile int32_t yInt;
volatile int32_t y_1,y_2,x_1,x_2=0;*/

float error=0;
float y;
float y_1,y_2,x_1,x_2=0;
float tempy;
float error_conv;
float canal1;//pe3
float canal2;//pe2




void timer0Handler(){
    uint32_t adcValues[2];
    uint32_t spiData;
    //limpiar las banderas de las interrupciones
    TimerIntClear(TIMER0_BASE , TIMER_TIMA_TIMEOUT);
    //inicial la conversion del adc
    ADCProcessorTrigger(ADC0_BASE, 2);
    while(!ADCIntStatus(ADC0_BASE, 2, false));
    ADCIntClear(ADC0_BASE, 2);
    ADCSequenceDataGet(ADC0_BASE, 2, adcValues);
    //PE3 - PE2
    canal1 = ((adcValues[1])*3.3)/4095.0;
    canal2 = ((adcValues[0])*3.3)/4095.0;
    error= canal1-canal2;



 /************************************************************************************************************
 *                                                  ts 0.001                                                *
 ************************************************************************************************************/
//  y = tus_1k[0]*y_1 + tus_1k[1]*y_2 + tus_1k[2]*error + tus_1k[3]*x_1 + tus_1k[4]*x_2 ;  //tustin
  //y = ZPM_1k[0]*y_1 + ZPM_1k[1]*y_2 + ZPM_1k[2]*error + ZPM_1k[3]*x_1 + ZPM_1k[4]*x_2 ;  //zero-pole
//    y = BE_1k[0]*y_1  + BE_1k[1]*y_2  + BE_1k[2]*error  + BE_1k[3]*x_1  + BE_1k[4]*x_2  ;  //Backward

/************************************************************************************************************
 *                                                  ts 0.0001                                                *
 ************************************************************************************************************/

//    y = (tus_10k[0]*y_1) + (tus_10k[1*]y_2) + (tus_10k[2]*error) + (tus_10k[3]*x_1) + (tus_10k[4]*x_2);  //tustin
    y = (ZPM_10k[0]*y_1) + (ZPM_10k[1]*y_2) + (ZPM_10k[2]*error) + (ZPM_10k[3]*x_1) + (ZPM_10k[4]*x_2);  //zero-pole
 //   y = (BE_10k[3]*y_1)  + (BE_10k[4]*y_2)  + (BE_10k[0]*error)  + (BE_10k[1]*x_1)  + (BE_10k[2]*x_2);       //Backward

//************************************************************************************************************


    tempy=y;

    y_2=y_1;
    y_1=y;
    x_2=x_1;
    x_1=error;

    if(y>6) y = 6;
    else if(y<-6) y = -6;
    y = (y*4095.0)/3.3;







//************************************************************************************************************



    spiData = (uint32_t)((0b0111 << 12) | (0x0FFF & (uint16_t)y));
    SSIDataPut(SSI0_BASE, spiData);
    while(SSIBusy(SSI0_BASE));

}


int main(void){
    // Reloj a 80 MHz
        SysCtlClockSet( SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |SYSCTL_XTAL_16MHZ| SYSCTL_SYSDIV_2_5);


   //------------------ ADC -----------------------------
   SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0); //habilitar el adc0
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE); // se usara AIN0 y AIN1, que estan en PE3/PE2

   GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_3 | GPIO_PIN_2);
   //configurar secuenciador
   ADCSequenceConfigure(ADC0_BASE, 2 , ADC_TRIGGER_PROCESSOR, 0);
   //paso 0 del sequencer 2
   ADCSequenceStepConfigure(ADC0_BASE, 2, 0 , ADC_CTL_CH0);
   //paso 1 del sequencer 2, aqui termina la secuencia
   ADCSequenceStepConfigure(ADC0_BASE, 2, 1, ADC_CTL_CH1 | ADC_CTL_IE | ADC_CTL_END);
   //habilitar la secuencia
   ADCSequenceEnable(ADC0_BASE, 2);
   ADCIntClear(ADC0_BASE, 2); //limpiar la bandera de interrupcion

   IntMasterEnable();

   //------------------ TIMER --------------------------
   //habilitar modulo timer 0
   SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
   // TIMER 0 como periodico
   TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
   // tiempo con el cual se va a dar un overflow del timer
   TimerLoadSet(TIMER0_BASE, TIMER_A, (uint32_t)(SysCtlClockGet()/FREQ_MUESTREO));

   //-------------------- SPI ---------------------------
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
   SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI0);
   GPIOPinConfigure(GPIO_PA2_SSI0CLK);
   GPIOPinConfigure(GPIO_PA3_SSI0FSS);
   GPIOPinConfigure(GPIO_PA4_SSI0RX);
   GPIOPinConfigure(GPIO_PA5_SSI0TX);
   GPIOPinTypeSSI(GPIO_PORTA_BASE, GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 |GPIO_PIN_2);
   SSIConfigSetExpClk(SSI0_BASE, SysCtlClockGet(), SSI_FRF_MOTO_MODE_0,SSI_MODE_MASTER, SPI_FREC, SPI_ANCHO);
   SSIEnable(SSI0_BASE);


   //------------------ INTERRUPCIONES ------------------
   IntMasterEnable();
   IntEnable(INT_TIMER0A);
   TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

   // --------------- START MODULES ----------------------
   TimerEnable(TIMER0_BASE, TIMER_A);

   while(1);

}
